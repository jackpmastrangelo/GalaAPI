package gala.gala_api.service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletResponse;
import javax.transaction.Transactional;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import gala.gala_api.service.email.EmailService;
import gala.gala_api.service.email.SendTicketEmail;
import org.springframework.beans.factory.annotation.Autowired;

import gala.gala_api.dao.EventCrudDao;
import gala.gala_api.dao.TicketCrudDao;
import gala.gala_api.entity.Event;
import gala.gala_api.entity.Ticket;
import gala.gala_api.entity.TicketStatus;
import org.springframework.stereotype.Service;

@Transactional
@Service
public class TicketService {

  @Autowired
  private TicketCrudDao ticketCrudDao;

  @Autowired
  private EventCrudDao eventCrudDao;

  @Autowired
  private AwsS3Service awsS3Service;

  @Autowired
  private EmailService emailService;

	public String createTicket(String eventId, String email, HttpServletResponse response) {
    Ticket newTicket = new Ticket();
    newTicket.setEmail(email);
    newTicket.setStatus(TicketStatus.ACTIVE); //Might not be always the case, but for now makes sense.
    Optional<Event> maybeEvent = this.eventCrudDao.findById(eventId);
    Event event;

    if (maybeEvent.isPresent()) {
      event = maybeEvent.get();
    } else {
      response.setStatus(404); //Not found.
      response.setHeader("gala-message", "Event with id " + eventId + " could not be found.");
      return null;
    }

    if (event.getCapacity() > ticketCrudDao.findByEvent(event).size()) {
      newTicket.setEvent(event);
      ticketCrudDao.save(newTicket);

      String ticketId = newTicket.getId();

      this.generateAndUploadQRCode(ticketId);
      emailService.sendEmail(email, new SendTicketEmail(event.getName(), newTicket.getId()));

      response.setStatus(200); //Success
      response.setHeader("gala-message","Ticket successfully added.");
      return ticketId;
    } else {
      response.setStatus(409); //Conflict
      response.setHeader("gala-message","Event capacity has already been reached.");
      return null;
    }
  }

  public void validateTicket(String ticketId, Long eventId, HttpServletResponse response) {
    Ticket ticket;
    Optional<Ticket> maybeTicket = ticketCrudDao.findById(ticketId);

    if (maybeTicket.isPresent()) {
      ticket = maybeTicket.get();
    } else {
      response.setStatus(404); //Not found
      response.setHeader("gala-message", "Ticket with Id " + ticketId + " could not be found.");
      return;
    }

    if (!ticket.getEvent().getId().equals(eventId)) {
      response.setStatus(401);//Unauthorized
      response.setHeader("gala-message", "Ticket with Id " + ticketId +
              "does not belong to event with Id " + eventId.toString() + ".");
      return;
    }

    if (ticket.getStatus() == TicketStatus.ACTIVE) {
      ticket.setStatus(TicketStatus.VALIDATED);
      ticketCrudDao.save(ticket);
      response.setStatus(200);//Ok
      response.setHeader("gala-message", "Ticket with Id " + ticketId + " was successfully validated.");
    } else if (ticket.getStatus() == TicketStatus.VOIDED) {
      response.setStatus(406);//Not acceptable (harsh)
      response.setHeader("gala-message","Ticket with Id " + ticketId + " was voided. Could not validate.");
    } else if (ticket.getStatus() == TicketStatus.VALIDATED){
      response.setStatus(406);
      response.setHeader("gala-message", "Ticket with Id " + ticketId + " has already been validated. Could not validate.");
    } else {
      response.setStatus(406);
      response.setHeader("gala-message", "Could not ascertain whether ticket with Id "
              + ticketId + " was active or not. Could not validate");
    }
  }

  //TODO Talk about error handling
  private void generateAndUploadQRCode(String qrValue) {
    QRCodeWriter qrCodeWriter = new QRCodeWriter();
    BitMatrix bitMatrix;
    try {
      bitMatrix = qrCodeWriter.encode(qrValue, BarcodeFormat.QR_CODE, 200, 200);
    } catch (WriterException e) {
      e.printStackTrace();
      bitMatrix = null;
      //TODO Error handling here
    }

    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    try {
      MatrixToImageWriter.writeToStream(bitMatrix, "PNG", byteArrayOutputStream);
    } catch (IOException e) {
      e.printStackTrace();
    }
    byte[] s3Obj = byteArrayOutputStream.toByteArray();

    awsS3Service.putS3ObjectFromByteArray(s3Obj, "gala-cdn", "prod/autogenerated/qr-codes/qr-" + qrValue + ".png");
  }
}