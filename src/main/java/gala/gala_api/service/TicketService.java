package gala.gala_api.service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletResponse;
import javax.transaction.Transactional;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import gala.gala_api.service.email.EmailService;
import gala.gala_api.service.email.SendTicketEmail;
import org.springframework.beans.factory.annotation.Autowired;

import gala.gala_api.dao.EventCrudDao;
import gala.gala_api.dao.TicketCrudDao;
import gala.gala_api.entity.Event;
import gala.gala_api.entity.Ticket;
import gala.gala_api.entity.TicketStatus;
import org.springframework.stereotype.Service;

@Transactional
@Service
public class TicketService {

  @Autowired
  private TicketCrudDao ticketCrudDao;

  @Autowired
  private AwsS3Service awsS3Service;

  public Ticket createTicket(Event event, String email) {
    Ticket ticket = new Ticket();
    ticket.setEvent(event);
    ticket.setEmail(email);
    ticket.setStatus(TicketStatus.ACTIVE);

    ticketCrudDao.save(ticket);

    return ticket;
  }

  public boolean areTicketsRemaining(Event event) {
    List<Ticket> existingTickets = ticketCrudDao.findByEvent(event);
    return event.getCapacity() > existingTickets.size();
  }

  public void validateTicket(Ticket ticket) {
    ticket.setStatus(TicketStatus.VALIDATED);
    ticketCrudDao.save(ticket);
  }

  public void generateAndUploadQRCode(String ticketId) {
    QRCodeWriter qrCodeWriter = new QRCodeWriter();
	  try {
      BitMatrix bitMatrix = qrCodeWriter.encode(ticketId, BarcodeFormat.QR_CODE, 200, 200);

      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      MatrixToImageWriter.writeToStream(bitMatrix, "PNG", byteArrayOutputStream);
      byte[] s3Obj = byteArrayOutputStream.toByteArray();

      awsS3Service.putS3ObjectFromByteArray(s3Obj, "gala-cdn",
              "prod/autogenerated/qr-codes/qr-" + ticketId + ".png");
    } catch (WriterException | IOException e) {
      throw new RuntimeException(e);
    }
  }

  public Optional<Ticket> retrieveTicket(String ticketId) {
    return ticketCrudDao.findById(ticketId);
  }

  public void setTicketCrudDao(TicketCrudDao ticketCrudDao) {
    this.ticketCrudDao = ticketCrudDao;
  }

  public void setAwsS3Service(AwsS3Service awsS3Service) {
    this.awsS3Service = awsS3Service;
  }
}