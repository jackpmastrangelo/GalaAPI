package gala.gala_api.service;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.S3Object;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import sun.misc.IOUtils;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

/**
 * This service allows interaction with AWS S3 file storage.
 */
@Service
public class AwsS3Service {

  //TODO: Extract bucket as property? Mainly if we use different buckets for different environments
  private static final String GALA_FILESTORE_BUCKET = "gala-internal-filestore";
  private static final String GALA_CDN_BUCKET = "gala-cdn";
  private static final String TICKET_EMAIL_KEY = "emails/sendEmailTemplate.html";
  private static final String TICKET_QR_CODE_KEY_TEMPLATE = "prod/autogenerated/qr-codes/qr-%s.png";

  private static final String PNG_FILE_FORMAT = "PNG";
  private static final int QR_CODE_WIDTH = 200;
  private static final int QR_CODE_HEIGHT = 200;

  private AmazonS3 s3Client;

  /**
   * Gets the given s3 file and returns its contents as a large string. Currently does not preserver newlines.
   *
   * @param bucket The AWS bucket where the file is stored.
   * @param key The actual key of the file within the bucket (This is essentially a filepath within the bucket.)
   *
   * @return The s3 file's contents as a String.
   */
  public String fetchS3ObjectAsString(String bucket, String key) {
    S3Object emailTemplateObj = s3Client.getObject(bucket, key);
    BufferedReader s3Reader = new BufferedReader(new InputStreamReader(emailTemplateObj.getObjectContent()));

    StringBuilder result = new StringBuilder();
    String line;
    try {
      while ((line = s3Reader.readLine()) != null) {
        result.append(line);
      }
    } catch (IOException e) {
      throw new RuntimeException(e);
    }

    return result.toString();
  }

  /*
    Reasons I think this should be in the AwsS3Service
    1. One less dependency of the ticket service
    2. No ambiguity about data sources
    3. The AwsS3Service would then fully convey the scope of S3 in Gala at the business level
    4. Consolidate S3-dependant constants like the bucket name and key
    5. Closer to the code that retrieves the QR-code and could clarify the lifecycle of the QR code
   */
  public void generateAndUploadQrCodeTicket(String ticketId) {
    QRCodeWriter qrCodeWriter = new QRCodeWriter();
    try {
      BitMatrix bitMatrix = qrCodeWriter.encode(ticketId, BarcodeFormat.QR_CODE, QR_CODE_WIDTH, QR_CODE_HEIGHT);

      ByteArrayOutputStream stream = new ByteArrayOutputStream();
      MatrixToImageWriter.writeToStream(bitMatrix, PNG_FILE_FORMAT, stream);
      byte[] qrCode = stream.toByteArray();

      putS3ObjectFromByteArray(qrCode, GALA_CDN_BUCKET, String.format(TICKET_QR_CODE_KEY_TEMPLATE, ticketId));
    } catch (WriterException | IOException e) {
      throw new RuntimeException(e);
    }
  }

  //TODO Look at html template, how is ticketid used?
  public String fetchTicketEmailHtml(String eventName, String ticketId) {
    S3Object emailTemplate = s3Client.getObject(GALA_FILESTORE_BUCKET, TICKET_EMAIL_KEY);
    String htmlBody = readToString(emailTemplate);

    return htmlBody
            .replace("-EVENT_NAME-", eventName)
            .replace("-QR_CODE_NUMBER-", ticketId);
  }

  private void putS3ObjectFromByteArray(byte[] s3Obj, String bucket, String key) {
    InputStream inputStream = new ByteArrayInputStream(s3Obj);

    PutObjectRequest request = new PutObjectRequest(bucket, key, inputStream, new ObjectMetadata());
    s3Client.putObject(request);
  }

  private String readToString(S3Object s3Object) {
    BufferedReader reader = new BufferedReader(new InputStreamReader(s3Object.getObjectContent()));

    StringBuilder result = new StringBuilder();
    String line;
    try {
      while ((line = reader.readLine()) != null) {
        result.append(line);
      }
    } catch (IOException e) {
      throw new RuntimeException(e);
    }

    return result.toString();
  }

  @Autowired
  public void setS3Client(AmazonS3 s3Client) {
    this.s3Client = s3Client;
  }
}